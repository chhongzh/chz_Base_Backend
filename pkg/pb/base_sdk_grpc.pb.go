// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: base_sdk.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BaseSDKService_HasPermission_FullMethodName           = "/pb.BaseSDKService/HasPermission"
	BaseSDKService_OpenOAuth_FullMethodName               = "/pb.BaseSDKService/OpenOAuth"
	BaseSDKService_VerifyApplicationSecret_FullMethodName = "/pb.BaseSDKService/VerifyApplicationSecret"
)

// BaseSDKServiceClient is the client API for BaseSDKService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Base SDK Service
type BaseSDKServiceClient interface {
	// 检查是否有权限
	HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error)
	OpenOAuth(ctx context.Context, in *OpenOAuthRequest, opts ...grpc.CallOption) (*OpenOAuthResponse, error)
	VerifyApplicationSecret(ctx context.Context, in *VerifyApplicationSecretRequest, opts ...grpc.CallOption) (*VerifyApplicationSecretResponse, error)
}

type baseSDKServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseSDKServiceClient(cc grpc.ClientConnInterface) BaseSDKServiceClient {
	return &baseSDKServiceClient{cc}
}

func (c *baseSDKServiceClient) HasPermission(ctx context.Context, in *HasPermissionRequest, opts ...grpc.CallOption) (*HasPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasPermissionResponse)
	err := c.cc.Invoke(ctx, BaseSDKService_HasPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseSDKServiceClient) OpenOAuth(ctx context.Context, in *OpenOAuthRequest, opts ...grpc.CallOption) (*OpenOAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenOAuthResponse)
	err := c.cc.Invoke(ctx, BaseSDKService_OpenOAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseSDKServiceClient) VerifyApplicationSecret(ctx context.Context, in *VerifyApplicationSecretRequest, opts ...grpc.CallOption) (*VerifyApplicationSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyApplicationSecretResponse)
	err := c.cc.Invoke(ctx, BaseSDKService_VerifyApplicationSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseSDKServiceServer is the server API for BaseSDKService service.
// All implementations must embed UnimplementedBaseSDKServiceServer
// for forward compatibility.
//
// Base SDK Service
type BaseSDKServiceServer interface {
	// 检查是否有权限
	HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error)
	OpenOAuth(context.Context, *OpenOAuthRequest) (*OpenOAuthResponse, error)
	VerifyApplicationSecret(context.Context, *VerifyApplicationSecretRequest) (*VerifyApplicationSecretResponse, error)
	mustEmbedUnimplementedBaseSDKServiceServer()
}

// UnimplementedBaseSDKServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseSDKServiceServer struct{}

func (UnimplementedBaseSDKServiceServer) HasPermission(context.Context, *HasPermissionRequest) (*HasPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermission not implemented")
}
func (UnimplementedBaseSDKServiceServer) OpenOAuth(context.Context, *OpenOAuthRequest) (*OpenOAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenOAuth not implemented")
}
func (UnimplementedBaseSDKServiceServer) VerifyApplicationSecret(context.Context, *VerifyApplicationSecretRequest) (*VerifyApplicationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyApplicationSecret not implemented")
}
func (UnimplementedBaseSDKServiceServer) mustEmbedUnimplementedBaseSDKServiceServer() {}
func (UnimplementedBaseSDKServiceServer) testEmbeddedByValue()                        {}

// UnsafeBaseSDKServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseSDKServiceServer will
// result in compilation errors.
type UnsafeBaseSDKServiceServer interface {
	mustEmbedUnimplementedBaseSDKServiceServer()
}

func RegisterBaseSDKServiceServer(s grpc.ServiceRegistrar, srv BaseSDKServiceServer) {
	// If the following call pancis, it indicates UnimplementedBaseSDKServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BaseSDKService_ServiceDesc, srv)
}

func _BaseSDKService_HasPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseSDKServiceServer).HasPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseSDKService_HasPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseSDKServiceServer).HasPermission(ctx, req.(*HasPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseSDKService_OpenOAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseSDKServiceServer).OpenOAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseSDKService_OpenOAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseSDKServiceServer).OpenOAuth(ctx, req.(*OpenOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseSDKService_VerifyApplicationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyApplicationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseSDKServiceServer).VerifyApplicationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseSDKService_VerifyApplicationSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseSDKServiceServer).VerifyApplicationSecret(ctx, req.(*VerifyApplicationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseSDKService_ServiceDesc is the grpc.ServiceDesc for BaseSDKService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseSDKService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BaseSDKService",
	HandlerType: (*BaseSDKServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HasPermission",
			Handler:    _BaseSDKService_HasPermission_Handler,
		},
		{
			MethodName: "OpenOAuth",
			Handler:    _BaseSDKService_OpenOAuth_Handler,
		},
		{
			MethodName: "VerifyApplicationSecret",
			Handler:    _BaseSDKService_VerifyApplicationSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base_sdk.proto",
}
